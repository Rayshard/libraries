☐ json
    ☐ README
    ☐ add unicode support
☐ c++:lpc
    ☐ add tests
    ☐ put none template code in cpp file
    ✔ Change ParseError to inherit from std::exception and override the what func @done(21-12-02 18:29)
        ✔ This will allow you to store a 'trace' in an excpetion @done(21-12-02 18:29)
    ✔ Add Parser<T>.Satisfty(bool(*_predicate)(const Result&)) to parser: succeeds if predicate is true, fails if predicatte is fails @done(21-12-02 19:37)
    ✔ Add Parser<bool>.Test(T _value) to parser: always succeeds, returning a parseresult with value true if parser succeeds with valkue _value @done(21-12-02 19:54)
    ✔ Add Parser<std::monostate> Not(Parser<T> _parser): succeeds if _parser fails @done(21-12-02 20:07)
    ✔ Add Parser<std::monostate> Error(std::string messgae): always fails and uses message and ParseError Message @done(21-12-02 20:17)
    ✔ Add Count(parser, n) = Quantified(parser, min=n, max=n) @done(21-12-02 20:19)
    ✔ Between(open, parser, close) = open >> parser << close @done(21-12-02 20:29)
    ✔ Chain(parser, vector<ops>) @done(21-12-03 01:06)
    ✔ Suffixed(parser, suffix) = parser << suffix @done(21-12-02 20:34)
    ✔ Prefixed(prefix, parser) = prefix >> suffix @done(21-12-02 20:34)
    ✔ LookAhead(parser): parsers parse but goes bback to original stream position @done(21-12-02 22:59)
    ✔ Regex() @done(21-12-02 23:32)
        ✔ Char() @done(21-12-02 23:32)
        ✔ Chars() @done(21-12-02 23:32)
        ✔ EOS() @done(21-12-02 23:32)
        ✔ AnyChar() @done(21-12-02 23:32)
        ✔ Letters() @done(21-12-02 23:32)
        ✔ Digits() @done(21-12-02 23:32)
        ✔ AlphaNum() @done(21-12-02 23:32)
☐ c++/rxd
    ☐ depth buffer
    

☐ unittest
    ☐ README

☐ Future Libraries
    ☐ tokenizer and parser
    ☐ cli